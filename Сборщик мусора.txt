Было выяснено, что переменные являются лишь названием ссылок на объекты в памяти. Но что происходит после того, как переменная изменила ссылку и стала указывать на новый объект? Вот в этом примере, допустим:

>>> a = 5
>>> a = 'word'

Что произошло с объектом 5 после того, как переменная a стала указывать на объект 'word'? В случае, если на 5 не ссылалась больше ни одна переменная, этот объект удалятся сборщиком мусора. Сборщик мусора оценивает поле счетчика ссылок у каждого объекта, используемого в программе и в случае, если этот счетчик становится равен 0- тотчас же освобождает память занимаемую объектом и переводит эту область в пул свободной для использования памяти.

Но есть небольшая проблема с таким сборщиком мусора (основанном на счетчике ссылок), она проявляется в этом примере кода:

a = []
b = [a]
a.append(b)

Всего за три строки кода получилось сделать так, чтобы два объекта ссылались друг на друга. Если после этого присвоить переменным a и b другие ссылки на объекты- то два списка так и останутся лежать в памяти, и у них будет минимум по единице в их поле счетчике ссылок. А это, в свою очередь, означает, что сборщик мусора не станет их трогать и не будет высвобождать память.

Можно поступить проще и попробовать сломать python более элегантным образом:

a = []
a.append(a)

Все, теперь объект a и вовсе ссылается сам на себя.
