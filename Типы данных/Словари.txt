Словари являются представителем неупорядоченных изменяемых коллекций, в частности отображений. Они не являются последовательностями, а следовательно, не поддерживают операции конкатенации и взятия среза.

Словари не поддерживают индексацию по смещению (потому что являются неупорядоченными). Предоставляют свои значения только при индексации по ключу.

dict['key'] -> value

Создать словарь можно следующими образами:

dict1 = {'key1' : 'value1', 'key2' : 'value2'}
dict1 = dict(key1 = value1, key2 = value2)
dict1 = dict(['value1', 'value2'])
dict1 = dict(('value1', 'value2'))
dict1 = dict(zip(keys, values))
dict1 = dict.fromkeys(['key1', 'key2', 'key3']) -> вернет словарь с тремя ключами, по которым будет храниться None

В ключах словаря не могут находится нехешируемые объекты, такие, например, как списки.

Словари могут возвращать те или иные хранящиеся в них значени:

dict1.keys() -> вернет объект dict_keys, допускающий итерирование по ключам
dict1.values() -> вернет объект dict_values, допускающий итерирование по значениям, хранящимся в словаре
dict1.items() -> вернет объект dict_items, при итерировании по кортежам ключ-значенеи, при итерировании выплевываются ключ и значение:

for key, value in dict1.items():
    ...

Добавить значение в словарь можно применяя операцию:
dict1['несуществующий ключ'] = value1

Можно сделать поверхностную копию словаря:
dict1.copy()

Можно удалить все элементы:
dict1.clear()

Получить значение по ключу можно так:
dict1.get(key) -> вернет значение по ключу или None или другое дефолтное значение, если оно задано через dict.setdefault(default). Временное дефолтное значение можно передать через второй параметр в методе
dict.pop(key) -> действует аналогично .get(key), но еще и удаляет пару ключ-значение
dict1[key] -> если значения по ключу нет- выдаст KeyError

Словари поддерживают включения:
{x : x*2 for x in range(10)} -> [ключ : значение ...]

len(словаря) вернет число ключей

Проверка на членство ключа проводится операцией in:
key1 in dict1 -> True или False

Возможно провести объединение словаря с другим словарем через метод dict1.update(dict2), в таком случае словарь dict1 пополнится парами из словаря dict2, причем значения из dict2 перезапишут соответствующие значения dict1

