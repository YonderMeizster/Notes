Строки являются неизменяемыми типами, а также последовательностями.

Методы экземпляров строк:

'string'.find('st') -> 0 # Находит индекс первого вхождения подстроки 'st' в строке 'string' и возвращает этот индекс в форме целочисленного значения. Если строка не содержит подстроку, возвращает -1

'string'.replace('s', 't') -> вернет новую строку, в которой все вхождения 's' будут заменены на 't'. Исходная строка не будет изменена

'st ri ng'.split(' ') -> вернет список. Список будет содержать элементы строки, разделенные знаком пробела. Опять таки, с изначальной строкой изменений не будет произведено. По умлочанию в качестве разделителя выступает пробел.

'st ri ng'.rsplit(' ') -> вернет список. Список будет содержать элементы строки, разделенные знаком пробела. Опять таки, с изначальной строкой изменений не будет произведено. По умлочанию в качестве разделителя выступает пробел.

Разница между split и rsplit заключается в том, что split просматривает строку слева направо, в то время, как rsplit делает это в обратном порядке. Разница между методами возникает, если указывается параметр maxsplit. maxsplit говорит о том, сколько раз нужно вычленять из строки подстроку, например, если в строке два пробела и ведется разделение по этим пробелам, а maxsplit равен 1, то оба метода вернут обратно список. В списке будет два значения, первое попавшееся слева или справа, отделенное от другой строки пробелом, а во втором значении будет вся остальная строка.

'stroka'.upper() -> вернет строку, содержащую все элементы изначальной 'stroka' , но в верхнем регистре, то есть 'STROKA'

'STROKA'.lower() -> вернет строку, приведенную к нижнему регистру

'stroka'.isnumeric() -> вернет False. Проверяет, составлена ли строка целиком из цифр

'stroka'.isalpha() -> вернет True. Проверяет, состояит ли строка только из букв

'stroka {}'.format('is good') -> вернет 'stroka is good', метод format() позволяет подставлять в строку значения на лету. Позволяет осуществлять, например, вывод дробных чисел с точностью до какого- то знака после запятой.

f'stroka {value}' -> вернет строку, в которой будет подставлено значение переменной value. Коротко эта конструкция зовется f- строкой, пока что это достаточно.

r'C:\Windows' -> вернет строку, в точности повторяющую написаное. r от слова raw, т.е r – это сырые строки (необработанные строки). Нужен для того, чтобы слеш \ не вызывал экранирование символов. Дело в том, что при добавлении r в начале литерала дает интерпретатору понять, что внутри литерала не написано никаких спецпоследовательностей, таких как, например: \t - табуляция или \n - перенос строки.

'stroka'__add__('is good') -> возвращает результат конкатенации двух строк 'stroka' и 'is good', собственно говоря, при применении оператора + именно этот метод вызывается под капотом. Лутц говорит, что не стоит его применять по причине уменьшения читаемости кода и даже уменьшения быстродействия процесса конкатенации

'''stroka''' -> возвращает строку, сохраняя форматирование, определенное в литерале. Например, возможно написать в тройных одинарных кавычках некий текст, с разрывами строк, сохранить его в переменной и затем вывести на экран с точным отображением всех переносов строк

'\x...' является литералом, содержащим символ из таблицы Юникода, определенный по шестандцатиричному значению

'\u...' является литералом, содержащим символ из таблицы Юникода, определенный по Unicode - короткой форме

'\U...' является литералом, содержащим символ из таблицы Юникода, определенный по Unicode - длинной форме