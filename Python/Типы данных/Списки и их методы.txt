Список является последовательностью, изменяемым типом данных. Представляет из себя динамический массив ссылок на объекты

spisok.append('1') -> не возвращает ничего, но в уже имеющемся списке spisok добавляется новый элемент, в котором хранится передаваемый объект 1

spisok.pop() -> возвращает последний элемент списка, а также удаляет его из списка

spisok.pop(1) -> удаляет элемент по индексу 1 и возвращает его

# spisok.pop() может привести к IndexError, если список пустой, или, если указанный индекс выходит за границы списка

spisok.insert(1, 2) вставляет значение 2 по индексу 1, тем самым двигая весь список. Сложность операции равна O(n), по причине того, что весь список сдвигается в памяти

spisok.remove(3) удаляет первое встреченное значение 3 в списке spisok

# spisok.remove() может привести к ValueError, если пердаваемого в метод значения не найдется в списке

spisok.extend(another_spisok) выполняет конкатенацию двух списков spisok и another_spisok. То есть в отличие от append не создается новый элемент с ссылкой на объект, а два списка прям склеиваются

# в extend можно передавать и множества, а также словари, но в случае словарей к изначальному списку приконкатенируются ключи. Если проитерироваться по словарю через for i in dict1, i будет принимать значения исключительно ключей

spisok.sort() сортирует список spisok. Может сортировать как по возрастанию (по- умолчанию), так и по убыванию, в зависимости от параметра reverse. А также может принимать функцию сортировки через параметр key. Функция сортировки по- сути производит отображение элемента списка в какое- то число, или строку, что позволяет методу sort производить сортировку, опираясь на это значение. Например, так можно отсортировать маленькие словарики, из которых состоит список spisok по ключам или значениям

row_spisok = [row[0] for row in spisok] -> вернет список, содержащий значения столбца 0 в списке spisok. Если список spisok одомерный, то вернется одно значения, иначе несколько. Выражение row[0] for row in spisok является "генератором", о которых мне Лутц ничего не рассказывал, зато уже показывает, как можно делать



